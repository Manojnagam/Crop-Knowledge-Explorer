// üåæ Crop Knowledge Explorer Frontend Script (Render-ready)

// Global variables
let cropData = {};
let currentLanguage = 'en';
let currentCategory = '';

// Language mappings for category labels
const categoryLabels = {
    "Fruits": "Fruits / ‡Æ™‡Æ¥‡Æô‡Øç‡Æï‡Æ≥‡Øç / ‡∞™‡∞Ç‡∞°‡±ç‡∞≤‡±Å / ‡§´‡§≤ / ‡≤π‡≤£‡≥ç‡≤£‡≥Å‡≤ó‡≤≥‡≥Å",
    "Vegetables": "Vegetables / ‡Æï‡Ææ‡ÆØ‡Øç‡Æï‡Æ±‡Æø‡Æï‡Æ≥‡Øç / ‡∞ï‡±Ç‡∞∞‡∞ó‡∞æ‡∞Ø‡∞≤‡±Å / ‡§∏‡§¨‡•ç‡§ú‡§º‡§ø‡§Ø‡§æ‡§Å / ‡≤§‡≤∞‡≤ï‡≤æ‡≤∞‡≤ø‡≤ó‡≤≥‡≥Å",
    "Greens": "Greens / ‡Æï‡ØÄ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç / ‡∞Ü‡∞ï‡±Å‡∞ï‡±Ç‡∞∞‡∞≤‡±Å / ‡§∏‡§æ‡§ó / ‡≤∏‡≥ä‡≤™‡≥ç‡≤™‡≥Å‡≤ó‡≤≥‡≥Å",
    "Tubers": "Tubers / ‡Æï‡Æø‡Æ¥‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øç / ‡∞ï‡∞Ç‡∞¶‡∞Æ‡±Ç‡∞≤‡∞æ‡∞≤‡±Å / ‡§ï‡§Ç‡§¶ / ‡≤®‡≥Ü‡≤≤‡≤ó‡≤°‡≥ç‡≤°‡≥Ü‡≤ó‡≤≥‡≥Å",
    "Herbal": "Herbal / ‡ÆÆ‡ØÇ‡Æ≤‡Æø‡Æï‡Øà‡Æï‡Æ≥‡Øç / ‡∞î‡∞∑‡∞ß ‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞≤‡±Å / ‡§î‡§∑‡§ß‡•Ä‡§Ø ‡§™‡•å‡§ß‡•á / ‡≤î‡≤∑‡≤ß‡≤ø ‡≤∏‡≤∏‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å",
    "Units": "Units / ‡Æ™‡Æø‡Æ∞‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç / ‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±ç‡∞≤‡±Å / ‡§á‡§ï‡§æ‡§á‡§Ø‡§æ‡§Å / ‡≤ò‡≤ü‡≤ï‡≤ó‡≤≥‡≥Å"
};

// Language-specific UI text
const uiTexts = {
    'en': {
        'selectCategory': 'Select a Category',
        'backToCategories': '‚Üê Back to Categories',
        'chooseLanguage': 'Choose Language',
        'noDataMessage': 'Crop names not available in this language yet. Please select English or Tamil to view crop data.',
        'noDataSubtitle': 'Please select English or Tamil to view crop data.'
    },
    'ta': {
        'selectCategory': '‡Æí‡Æ∞‡ØÅ ‡Æ™‡Æø‡Æ∞‡Æø‡Æµ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
        'backToCategories': '‚Üê ‡Æ™‡Æø‡Æ∞‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ§‡Øç ‡Æ§‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ',
        'chooseLanguage': '‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
        'noDataMessage': '‡Æá‡Æ®‡Øç‡Æ§ ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æ©‡Øç‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        'noDataSubtitle': '‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï ‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.'
    },
    'te': {
        'selectCategory': '‡∞µ‡∞∞‡±ç‡∞ó‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',
        'backToCategories': '‚Üê ‡∞µ‡∞∞‡±ç‡∞ó‡∞æ‡∞≤‡∞ï‡±Å ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡±Å',
        'chooseLanguage': '‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',
        'noDataMessage': '‡∞à ‡∞≠‡∞æ‡∞∑‡∞≤‡±ã ‡∞™‡∞Ç‡∞ü ‡∞™‡±á‡∞∞‡±ç‡∞≤‡±Å ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞µ‡±Å. ‡∞á‡∞Ç‡∞ó‡±ç‡∞≤‡±Ä‡∞∑‡±ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞§‡∞Æ‡∞ø‡∞≥‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.',
        'noDataSubtitle': '‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞á‡∞Ç‡∞ó‡±ç‡∞≤‡±Ä‡∞∑‡±ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞§‡∞Æ‡∞ø‡∞≥‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.'
    },
    'hi': {
        'selectCategory': '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç',
        'backToCategories': '‚Üê ‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Å',
        'chooseLanguage': '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
        'noDataMessage': '‡§á‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§Ö‡§≠‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä ‡§Ø‡§æ ‡§§‡§Æ‡§ø‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§',
        'noDataSubtitle': '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä ‡§Ø‡§æ ‡§§‡§Æ‡§ø‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§'
    },
    'kn': {
        'selectCategory': '‡≤µ‡≤∞‡≥ç‡≤ó‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø',
        'backToCategories': '‚Üê ‡≤µ‡≤∞‡≥ç‡≤ó‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤π‡≤ø‡≤Ç‡≤¶‡≤ø‡≤∞‡≥Å‡≤ó‡≤ø',
        'chooseLanguage': '‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø',
        'noDataMessage': '‡≤à ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å‡≤ó‡≤≥‡≥Å ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤á‡≤Ç‡≤ó‡≥ç‡≤≤‡≤ø‡≤∑‡≥ç ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤§‡≤Æ‡≤ø‡≤≥‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø.',
        'noDataSubtitle': '‡≤á‡≤Ç‡≤ó‡≥ç‡≤≤‡≤ø‡≤∑‡≥ç ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤§‡≤Æ‡≤ø‡≤≥‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø.'
    }
};

// üå± Initialize app
document.addEventListener('DOMContentLoaded', async function() {
    showLoading();
    await loadCropData();
    setupEventListeners();
    updateCategoryButtons();
    hideLoading();
});

// üåæ Load crop data from backend API
async function loadCropData() {
    try {
        const response = await fetch('/data');  // ‚úÖ Fixed for Render
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        cropData = await response.json();
        console.log('‚úÖ Crop data loaded:', cropData);
    } catch (error) {
        console.error('‚ùå Error loading crop data:', error);
        alert('Error loading crop data. Please refresh the page.');
    }
}

// üåç Event listeners for language buttons & back button
function setupEventListeners() {
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            selectLanguage(this.getAttribute('data-lang'));
        });
    });

    const backBtn = document.getElementById('back-btn');
    if (backBtn) backBtn.addEventListener('click', showCategorySection);
}

// üåê Handle language selection
function selectLanguage(lang) {
    currentLanguage = lang;
    document.querySelectorAll('.lang-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelector(`[data-lang="${lang}"]`).classList.add('active');

    updateCategoryButtons();
    hideCropsSection();
}

// üçÄ Create category buttons dynamically
function updateCategoryButtons() {
    const container = document.getElementById('category-buttons');
    const title = document.getElementById('category-title');
    const currentText = uiTexts[currentLanguage] || uiTexts['en'];

    if (title) title.textContent = currentText.selectCategory;
    if (!container) return;

    container.innerHTML = '';
    Object.keys(cropData).forEach(category => {
        const btn = document.createElement('button');
        btn.className = 'category-btn';
        btn.textContent = getCategoryName(category, currentLanguage);
        btn.onclick = () => selectCategory(category);
        container.appendChild(btn);
    });
}

// üè∑Ô∏è Category name by language
function getCategoryName(category, lang) {
    const names = categoryLabels[category].split(' / ');
    const index = { 'en': 0, 'ta': 1, 'te': 2, 'hi': 3, 'kn': 4 };
    return names[index[lang]] || names[0];
}

// üå∏ Show crops in selected category
function selectCategory(category) {
    currentCategory = category;
    const crops = cropData[category] || [];
    const grid = document.getElementById('crops-grid');
    const title = document.getElementById('crops-title');
    const backBtn = document.getElementById('back-btn');
    const currentText = uiTexts[currentLanguage] || uiTexts['en'];

    if (title) title.textContent = getCategoryName(category, currentLanguage);
    if (backBtn) backBtn.textContent = currentText.backToCategories;
    grid.innerHTML = '';

    if (['te', 'hi', 'kn'].includes(currentLanguage)) {
        showLanguageMessage();
    } else {
        crops.forEach(crop => grid.appendChild(createCropCard(crop)));
    }

    showCropsSection();
}

// üåæ Create individual crop card
function createCropCard(crop) {
    const card = document.createElement('div');
    card.className = 'crop-card';
    const cropName = (currentLanguage === 'ta')
        ? (crop.Tamil?.trim() || crop.English?.trim() || '-')
        : (crop.English?.trim() || '-');
    card.innerHTML = `<div class="crop-name">${cropName}</div>`;
    return card;
}

// üåç Show message for unsupported languages
function showLanguageMessage() {
    const grid = document.getElementById('crops-grid');
    const text = uiTexts[currentLanguage] || uiTexts['en'];
    grid.innerHTML = `
        <div class="language-message">
            <div class="message-icon">üåê</div>
            <div class="message-text">${text.noDataMessage}</div>
            <div class="message-subtitle">${text.noDataSubtitle}</div>
        </div>
    `;
}

// üß≠ Section control
function showCropsSection() {
    document.querySelector('.category-section').style.display = 'none';
    document.getElementById('crops-section').style.display = 'block';
}

function hideCropsSection() {
    document.querySelector('.category-section').style.display = 'block';
    document.getElementById('crops-section').style.display = 'none';
}

function showCategorySection() {
    hideCropsSection();
}

// üåø Loading overlay
function showLoading() {
    const el = document.getElementById('loading');
    if (el) el.classList.remove('hidden');
}

function hideLoading() {
    const el = document.getElementById('loading');
    if (el) el.classList.add('hidden');
}